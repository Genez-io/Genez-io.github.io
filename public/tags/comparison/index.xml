<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Comparison on genezio</title>
    <link>/tags/comparison/</link>
    <description>Recent content in Comparison on genezio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="/tags/comparison/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comparison Between Databases in the Serverless World</title>
      <link>/blog/database-in-serverless-world-comparison/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/database-in-serverless-world-comparison/</guid>
      <description>Introduction Deciding on the right database is often a challenging task when starting a new project. If you plan to deploy your server on a function as a service infrastructure, the decision is even more important because it will have a huge impact on how fast your server will respond to queries.
In a nutshell In this article, I performed a quite deep analysis of how different databases are performing in a Function as a Service environment, but if you just want the short version, here it is:</description>
    </item>
    
    <item>
      <title>The Evolution of APIs: A History of REST and RPC</title>
      <link>/blog/the-evolution-of-apis-a-history-of-rest-and-rpc/</link>
      <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/the-evolution-of-apis-a-history-of-rest-and-rpc/</guid>
      <description>Comparison This article has two main components: the history of the paradigms, and a tutorial on how to implement both paradigms using genezio.
Prerequisites for the tutorial:
Install npm Have an IDE or text editor installed, e.g. Visual Studio Code Create a free genezio account
Summary REST and RPC are two distinct approaches to web services and distributed computing. REST is focused on resource manipulation and provides a uniform interface for accessing and modifying resources, while RPC is focused on method invocation and provides a way for applications to access remote services and resources.</description>
    </item>
    
    <item>
      <title>Exploring the Differences Between genezio and Express.js</title>
      <link>/blog/exploring-the-differences-between-genezio-and-express.js/</link>
      <pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/exploring-the-differences-between-genezio-and-express.js/</guid>
      <description>APIs are one of the most important tools in software technology and are used for building modern and reliable software products. There are many ways of developing and exposing an API. Over time, frameworks were built, and doing this became much easier and user-friendlier. Today we will compare genezio with one of the major players in the market, Express. Letâ€™s get started!
Express is one of the most popular frameworks used for backend programming.</description>
    </item>
    
    <item>
      <title>When to use AWS Lambda and genezio?</title>
      <link>/blog/when-to-use-aws-lambda-and-genezio/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>/blog/when-to-use-aws-lambda-and-genezio/</guid>
      <description>In recent years, serverless computing has become increasingly popular among developers seeking to simplify the deployment and management of their applications.
AWS Lambda is a well known serverless computing service provided by Amazon Web Services. It allows developers to write functions which are executed in lightweight virtual machines (micro vms) in response to specific events. These virtual machines process requests before returning to a dormant state, with users only paying for the time they are active.</description>
    </item>
    
  </channel>
</rss>
